// Java Solution

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int low=0;
        int high=nums.length-1;
        int n=nums.length;
        while(low<high){
            int mid=(low+high)/2;
            
            if(mid%2==0){
                if(mid>0 && mid<n-1){
                    if(nums[mid]==nums[mid+1]){
                        low=mid+1;
                    }else if(nums[mid]==nums[mid-1]){
                        high=mid-1;
                    }else
                        return nums[mid];
                }else
                    return nums[mid];                
            }else{
                if(mid>0 && mid<n-1){
                    if(nums[mid]==nums[mid+1]){
                        high=mid-1;
                    }else if(nums[mid]==nums[mid-1]){
                        low=mid+1;
                    }else
                        return nums[mid];
                }else
                    return nums[mid];
            }

        }
        return nums[low];
    }
}


// Python solution
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        s=0
        e=len(nums)-1
        while(s<=e):
            mid=(s+e)//2
            # print(mid)
            
            if(mid==0 or mid==len(nums)-1):
                return nums[mid]
            elif(nums[mid]==nums[mid-1]):
                n=len(nums[:mid-1])
                # print(n)
                if(n%2==0):
                    s=mid+1
                else:
                    e=mid-1
                # print(e)
            elif(nums[mid]==nums[mid+1]):
                n=len(nums[:mid])
                if(n%2==0):
                    s=mid+1
                else:
                    e=mid-1
            else:
                return nums[mid]
            # print(s,e)
            
